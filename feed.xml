<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>The Mill</title>
    <link href="https://mill.plainopen.com/feed.xml" rel="self" />
    <link href="https://mill.plainopen.com" />
    <updated>2025-03-07T11:48:56-05:00</updated>
    <author>
        <name>Dmitry Sagalovskiy</name>
    </author>
    <id>https://mill.plainopen.com</id>

    <entry>
        <title>Sovereign Lumber</title>
        <author>
            <name>Dmitry Sagalovskiy</name>
        </author>
        <link href="https://mill.plainopen.com/sovereign-lumber.html"/>
        <id>https://mill.plainopen.com/sovereign-lumber.html</id>
            <category term="startups"/>
            <category term="software"/>
            <category term="open-source"/>

        <updated>2025-03-07T11:30:00-05:00</updated>
            <summary>
                <![CDATA[
                    <p>Two talks, on the software analogy to lumber and chairs, and on software sovereignty in Europe, connected in my mind, and hit at the essence of what‚Äôs missing in the open source ecosystem today...</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                
<p>Two talks that stood out for me at <a href="https://www.opensource-experience.com/en/">2024 Open Source Experience</a> conference in December were by Emily Omier, with the software analogy to lumber and chairs, and by Jutta Horstmann on software sovereignty in Europe being more urgent than ever. These connected strongly in my mind, and hit at the essence of what‚Äôs missing in the open source ecosystem today.</p>
<h3>Lumber and chairs</h3>
<p>First the analogy, briefly:</p>
<ul>
<li>Software itself (code, which may be open-source) is like lumber. It‚Äôs a product, used to make other products for consumers.</li>
<li>The product for consumers is more than code. It‚Äôs ready-to-use well-maintained software, which may includes nice packaging or installation help, support, services, seamless upgrades, SLAs, compliance contracts, customizations, white-glove onboarding, etc. That is analogous to chairs.</li>
</ul>
<p>The talk went on to a point about publishing lumber and selling chairs, which may work for some businesses selling products based on open-source software.<br><br>During Q&amp;A, a question came up about the lumber-and-chairs analogy. "Lumber decays; code does not. Doesn‚Äôt that make a difference?" Ah, but software does decay! In fact, faster than lumber. This is my first big takeaway, with a strong connection to the sovereignty talk.</p>
<h3>European software sovereignty</h3>
<p>Jutta Horstmann‚Äôs talk focused on politics. European governments depend on software to function, and the software comes from big American companies, such as Microsoft, Oracle, and Google. They are concerned that the U.S. will use this dependence for geopolitical leverage. They saw enough in Trump‚Äôs first term to see it as a matter of ‚Äúwhen‚Äù, not ‚Äúif‚Äù. In case not everyone was convinced, she also mentioned cases when these American software companies jacked up prices drastically, with major impact on budgets.<br><br>They are shaken, vulnerable, and they see it as vital for Europe to reduce this dependence. That‚Äôs where open-source comes in.<br><br>I can‚Äôt help but think of my own reasons to prefer open source software over the proprietary kind. It‚Äôs a matter of trust, independence, and yes ‚Äî price.<br><br>Jutta heads Germany‚Äôs new Center for Digital Sovereignty of Public Administration (<a href="https://zendis.de/">ZenDiS</a>). ZenDiS now leads a project to provide a ‚Äúsovereign workplace‚Äù for public servants that combines open-source software from several vendors.<br><br>One slide singled out the promising ‚ÄúopenDesk ü´∂ La Suite‚Äù collaboration. La Suite is the sovereign suite from the French DINUM (La Direction Interminist√©rielle du Num√©rique), which takes a different approach, includes different software, but aims to solve the same problem.<br><br>In the lumber &amp; chair analogy, it‚Äôs very clear that any sovereign suite will do most of the ‚Äúchair‚Äù part on its own ‚Äî in particular, host and operate the software for its government within their own country. They may pay the software creator for some services, but chairs aren‚Äôt the main value here. We need to talk about the software itself, the lumber.</p>
<h3>Lumber is not free</h3>
<p>As an open-source enthusiast, I like to point out how the best software turns out to be open-source. Look at Linux for server operating systems, Postgres or MySQL for databases, code editors, compilers, web development frameworks. So many examples.<br><br><em>And yet this is a bit of a lie.</em> For software whose users are technical, many of the same users are capable and interested in contributing to it. Improving such software is directly beneficial to their job. Big companies often recognize this and hire core contributors. The open source model works great for such software. The community produces the lumber.<br><br>But the best <i>end-user</i> software ‚Äî the kind for non-technical people ‚Äî is‚Ä¶ sadly‚Ä¶ not open-source. Think of productivity tools, like documents, or spreadsheets, or videoconferencing. Its users can‚Äôt contribute to building it. The technical community capable of contributing is only a small fraction of its users, and usually much less motivated. For such software, there is a thriving "lumber and chairs" business: Microsoft Office, Google Workspace, Zoom, and dozens of other businesses for well-known popular products, and thousands for assorted consumer and B2B proprietary products.<br><br>Quality software for end users is not free lumber. It takes a serious investment to make such software, and ‚Äî when it fits the need ‚Äî brings plenty of customers who will pay. The money paid by customers for proprietary software pays back the investment, pays for maintaining and improving the products, and occasionally goes on to pay executives and investors, at scales we struggle to comprehend.<br><br>It doesn‚Äôt work to make such ‚Äúlumber‚Äù free. Yes, there is open-source software in this category. It usually struggles to compete. Sometimes it has quality but lacks marketing or sales behind it, and languishes behind worse commercial options. The exceptions prove the rule: for instance, Firefox and Blender 3D. Both great products, but both are built¬†primarily by paid engineers, rather than by a community; and the money comes mainly from big companies with non-open-source business models. (E.g. Firefox development is paid for mostly by Google, from having Google as the default search engine in Firefox.)</p>
<p>Neither is the "lumber" cheap. There have been efforts to build sovereign software suites by hiring some developers, and giving them the specs. It hasn't worked. Both DINUM and Zendis projects are now trying to build their suites around open-source software projects. But open-source projects are either struggling to be better than proprietary offerings, or struggling to survive, or both.</p>
<h3>Decay</h3>
<p>A big challenge with open-source software for end-users is that it decays, and sometimes fast.<br><br>A stable library may last for decades. For instance, LAPACK, for linear algebra, was written in Fortran in 1992 (with parts from well before then), and with its C bindings, it is still in active use. On the other hand, a browser, if not updated regularly, is an invitation to hackers. Firefox had 30+ releases over the last 12 months. Using a browser from a few months ago exposes you to security holes. Using a browser from a few years ago means that some websites will not work correctly (plus many security holes).<br><br>Software needs maintenance:</p>
<ul>
<li>Short time frame: urgent fixes such as security patches. They are important to develop and apply as quickly as possible, to reduce risk of attacks.</li>
<li>Medium time frames: bug fixes and updates for interoperability with other systems. Software doesn‚Äôt exist in a vacuum. Particularly user-facing software often interfaces with other systems (at least OS or browser, and usually many other things). As the world around it changes, it must be someone‚Äôs job to keep up.</li>
<li>Long time frames: improving the software to keep it competitive. Think new functionality, or working on mobile, or running in a private cloud, or integrating with the next hot thing everybody is asking for.</li>
</ul>
<p>This is all the "lumber" part, not the "chairs" part. The software ‚Äî the code itself, whether open-source or not ‚Äî needs investment and it needs revenue, not only to make a return on investment, but also to stay healthy.</p>
<h3>How to make (no) money</h3>
<p>It‚Äôs been a long story to convince you that open-source software ‚Äî at least the kind for non-technical audience ‚Äî needs to make money.<br><br>Perhaps not all of you, but I know that at least <em>some</em> of you do need convincing. I myself would‚Äôve needed convincing a few years ago. One reason is that there is a hard-to-dismiss beautiful idealistic idea about the FOSS ("free and open-source software") model: in the memorable phrase of Richard Stallman: <em>‚ÄúThink free as in free speech, not free beer‚Äù</em>. <br><br>You may have even heard it said that it‚Äôs totally possible to make free and open-source software, and sell it. You may even know companies that do that.<br><br><em>And yet this is a bit of a lie.</em> To be considered properly open-source by the community, software needs to have an OSI-approved license, in particular, satisfying the definition of ‚Äúopen source‚Äù here (<a href="https://opensource.org/osd">https://opensource.org/osd</a>). Let‚Äôs look at the main 3 points:</p>
<ol>
<li>The license shall not restrict any party from selling or giving away the software as a component‚Ä¶ [and] shall not require a royalty or other fee for such sale.</li>
<li>The program must include source code, and must allow distribution in source code as well as compiled form‚Ä¶</li>
<li>The license must allow modifications and derived works‚Ä¶</li>
</ol>
<p>These are shared, not coincidentally, by the <a href="https://www.gnu.org/philosophy/free-sw.html#four-freedoms">essential freedoms</a> from Free Software Foundation.</p>
<p>Points 2 and 3 are about liberty. Point 1 is the liberty for others to give away the software for free.<br><br>In other words, it is both ‚Äúfree as in free speech‚Äù and also ‚Äúfree as in free beer‚Äù. Sure, you can charge for it, but everyone else is perfectly within their rights to give it away. So no, you can‚Äôt <em>really</em> charge for it.</p>
<p>For some software, like libraries that become part of other software, there is GPL license which is considered open-source by the community, but which imposes "copyleft" restrictions on redistribution. This can enable the creator to charge for offering the same software under a different license. However, this dual-licensing business model doesn't help the creator make money from their work when it comes to software for end-users.</p>
<p>And so companies that make end-user open-source software go through all kinds of contortions, and usually end up with non-open-source software. It may be proprietary features (aka ‚Äúopen-core‚Äù), or licenses that go under the name of ‚Äúsource available‚Äù because they give some freedom (like 2 and 3) but are not accepted by the community as ‚Äúopen-source‚Äù. Examples abound.</p>
<h3>Sovereign lumber</h3>
<p>The more you think about it, the more you might inch towards the same conclusion that‚Äôs been drawing me: why insist on the same open-source model for <em>all</em> software even though software can be so vastly different ‚Äî in terms of what it is, who it's for, why it's used, who builds it, and who maintains it?</p>
<p>Why not accept as a community ‚Äî for some software at least ‚Äî the ‚Äúliberty‚Äù part of open-source without the ‚Äúfree beer‚Äù part?</p>
<p>Well, that‚Äôs not good enough. Recall Jutta Horstmann‚Äôs talk on sovereignty: independence is what‚Äôs important. Yes, the access to the source code and the right to modify it give a measure of independence and trust, but if you have to pay for it, then the vendor has control. They can jerk up the price, and pull the rug from under you. That‚Äôs true even if all they control is a part of the software ‚Äî some proprietary outside-the-open-core functionality, but that's exactly the piece that the vendor withheld from the open-source product to twist your sovereign arm into paying.<br><br>Can you pay but not be dependent? Maybe put price controls into the definition of ‚Äúopen-source license‚Äù? I know just enough economics to know nothing of this sort can work.</p>
<p>What we need is an arrangement that aligns incentives. It needs these properties:</p>
<ol>
<li>Software creator can charge money, and the customer gets much more value when paying than when not paying.</li>
<li>Software comes with strong liberties, but not the liberty to give it away for free.</li>
<li>User can pull the plug, and continue using the software without paying the vendor, at a cost of a substantial but realistic effort.</li>
</ol>
<p>The intended consequence of point 3 is that the vendor cannot get too greedy. As a founder of an open source company, it‚Äôs a painful one ‚Äî investors may continue to prefer proprietary-software companies to invest into ‚Äî but it‚Äôs at the heart of the compromise.<br><br>The intended consequence of point 2 is that software itself is monetizable (the lumber, not just the chairs). Without the liberty to give all of it away for free, it is not strictly FOSS ("free and open-source software"), and not OSI-compatible. To open-source enthusiasts, this is the painful one ‚Äî they may continue to prefer strictly FOSS-licensed options ‚Äî but this is also at the heart of the compromise.</p>
<p>The goal is to have an ecosystem of quality <em>end-user</em> software, which combines open-source values with<em>¬†</em>development paid for by willing customers, and which wins¬†over its proprietary rivals on quality,<i> </i>price, <i>and</i> the rights of the end-user.</p>
<p>What's very clear about open-source software is that its value comes primarily from the vibrant community behind it ‚Äî community that shares enough core values to overcome its many disagreements. <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">There is certainly more to say, and there are ideas that could work. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">I'd love to hear from you, the open-source community, to brew and refine these ideas together.</span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Please share your thoughts!</span></p>
<p>¬†</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How we share secrets at a fully-remote startup</title>
        <author>
            <name>Dmitry Sagalovskiy</name>
        </author>
        <link href="https://mill.plainopen.com/how-we-share-secrets-at-a-fully-remote-startup.html"/>
        <id>https://mill.plainopen.com/how-we-share-secrets-at-a-fully-remote-startup.html</id>
            <category term="startups"/>
            <category term="security"/>
            <category term="javascript"/>
            <category term="cryptography"/>
            <category term="algorithms"/>

        <updated>2025-01-29T00:47:55-05:00</updated>
            <summary>
                <![CDATA[
                    <header>
<p>Here‚Äôs the situation: a small, fully-remote software team works on a service (let‚Äôs say Grist), and to run it, they need a secret key...</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                
<p class="msg--highlight msg msg--info">Appeared originally at <a href="https://www.getgrist.com/blog/how-we-share-secrets-at-a-fully-remote-startup/">https://www.getgrist.com/blog/how-we-share-secrets-at-a-fully-remote-startup/</a> on 2024-07-16.</p>
</header>
<p>Here‚Äôs the situation: a small, fully-remote software team works on a service (let‚Äôs say <a href="https://www.getgrist.com/">Grist</a>), and to run it, they need a secret key (let‚Äôs say an API key for OpenAI<sup><a href="#footnote_1">(1)</a></sup>).</p>
<p>I, the co-CEO, signed up for the OpenAI account and generated an API key. Now I want to share it with my CTO, who is in charge of getting the feature out to production.</p>
<p>We work remotely. We talk on Slack, or <a href="https://www.kumospace.com/">Kumospace</a>, or Zoom, or even email. Do I want the secret in any of these channels? Nope.</p>
<p>I like to think of myself as security conscious: careful about privacy, passwords, encryption. (Please don‚Äôt take that as an invitation to target me for hacking.) And on a few occasions ‚Äî enough for this to feel like it‚Äôs becoming a theme ‚Äî I‚Äôve <em><a href="https://security.stackexchange.com/questions/18197/why-shouldnt-we-roll-our-own" target="_blank" rel="noopener noreferrer">rolled my own security</a></em>. Sort of.</p>
<h4>Don‚Äôt roll your own security</h4>
<p>Like many hard areas of human knowledge, security/cryptography is one where the more you know, the more you realize you don‚Äôt know.</p>
<p>I am not a security expert. But once upon a time, I did take a graduate level Randomized Algorithms class, which was mostly on cryptographic algorithms, from <a href="https://en.wikipedia.org/wiki/Michael_O._Rabin">Michael Rabin</a> ‚Äî one of the pioneers of public-key cryptography. Another class was a graduate level seminar on Elliptic Curves (the math behind <a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography">Elliptic-curve cryptography</a>). Not that I remember much of either ‚Äì I‚Äôm brandishing these credentials to give you at least a bit of confidence that I do in fact realize how much I don‚Äôt know.</p>
<p>Both security and cryptography are easier to mess up than to get right. If you mess up any part, everything breaks. And broken security is worse than useless, it‚Äôs dangerous. You‚Äôll be <em>less</em> safe relying on it than if you didn‚Äôt rely on it at all. Don‚Äôt roll your own!</p>
<h4>Encrypting secrets</h4>
<p>And with that in mind, let‚Äôs move towards breaking this advice.</p>
<p>Are there clever tools built to share secrets in a completely encrypted safe way? Yes, there are.<sup><a href="#footnote_2">(2)</a></sup> But we are not <a href="https://scoop4c.eu/cases/estonian-public-key-infrastructure">in Estonia</a>, and to rely on a tool, I‚Äôd have to trust it. Is that really different from just trusting Slack?</p>
<p>So I scratched my head, and decided that there are some tools I do trust already. I trust my computer, and my CTO‚Äôs computer, mostly because I have to. The task would be impossible if I didn‚Äôt. And I trust low-level tools already installed on our computers. One of them is <a href="https://nodejs.org/">Node.js</a>. Node.js is JavaScript for the server, and runs happily from the command line in a terminal.</p>
<p>So I asked myself: if I just limit my trust to Node.js, is that enough to share a secret?</p>
<p>Yes! But I need a bit of software ‚Äî some JavaScript code ‚Äî that would run in Node.js to encrypt/decrypt my secret. I could look for something to download, or I could write my own. Either way, if I don‚Äôt want to trust it, I want to be able to read and understand it. Luckily, what Node.js has built-in (and what I‚Äôve already decided I will trust) is enough that the extra code is small.</p>
<p>I wrote a small JS script run using Node.js from a terminal. Initially it was 46 lines, though now it‚Äôs 72 with support for larger secrets. <a href="https://github.com/gristlabs/secrets.js/blob/main/secrets.js">It‚Äôs also on GitHub</a>. You can read it and understand it.</p>
<figure class="post__image post__image--center" ><figure class="post__image"><img loading="lazy"  src="https://mill.plainopen.com/media/posts/3/code-3.png" alt="Full code of the script" width="366" height="696" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mill.plainopen.com/media/posts/3/responsive/code-3-xs.png 640w ,https://mill.plainopen.com/media/posts/3/responsive/code-3-sm.png 768w ,https://mill.plainopen.com/media/posts/3/responsive/code-3-md.png 1024w ,https://mill.plainopen.com/media/posts/3/responsive/code-3-lg.png 1366w ,https://mill.plainopen.com/media/posts/3/responsive/code-3-xl.png 1600w ,https://mill.plainopen.com/media/posts/3/responsive/code-3-2xl.png 1920w"></figure>
<figcaption >Pictured: all the code</figcaption>
</figure>
<h4>Let‚Äôs walk through it</h4>
<ol>
<li>The main workhorse is the Node <a href="https://nodejs.org/api/crypto.html">crypto</a> module. So no, I didn‚Äôt roll my own cryptography.</li>
<li>Then we have the <code>main()</code> function. When run with no arguments in a terminal, it helpfully prints out all available commands:
<pre class="language-bash"><code>$ ./secrets.js
Usage:
      ./secrets.js encrypt RECIPIENT_KEYFILE.pub &lt; PLAINTEXT_FILE
      ./secrets.js decrypt MY_KEYFILE.priv &lt; ENCRYPTED_FILE
      ./secrets.js genkey MY_KEYFILE</code></pre>
</li>
<li>Continuing with <code>main()</code>, we check if the command is <code>encrypt</code>. If so, read the public key and the plaintext file.</li>
<li>Encryption is almost fully provided by the <code>crypto</code> module:
<pre class="language-javascript"><code>crypto.publicEncrypt({key, padding}, plaintext).toString('base64')</code></pre>
We just have to pick the parameters (<code>padding</code>), and encode the result into text that‚Äôs easy to copy/paste.</li>
<li>But life isn‚Äôt so simple. This only works for very small inputs (OK for a short API key, not enough for an SSL certificate). If the input is too large, we do the typical thing public-key cryptography does:
<ol>
<li>Generate a small key for symmetric encryption on the fly.</li>
<li>Encrypt the long input using that key.</li>
<li>Put together the symmetric key (encrypted using the recipient‚Äôs public key) and the input (encrypted with the symmetric key). You can see how having the recipient‚Äôs private key would unlock the symmetric key, which would in turn unlock the data.</li>
</ol>
</li>
<li>Now we‚Äôre getting dangerously close to rolling our own, even though this logic is just 7 lines of code. There are more parameters (size of symmetric key, symmetric encryption algorithm, initialization vector), and there‚Äôs the question of whether our approach is right. There are multiple options that would work fine, but it‚Äôs possible to get it wrong, which would be worse than skipping the project altogether. I won‚Äôt lie: the parameters are not obvious, or even well-documented (either in Node‚Äôs <code>crypto</code>, or in OpenSSL that it uses under the hood). I did research on this, however, and recommend you do your own if you have doubts.</li>
<li>Continuing with <code>main()</code>, it then handles the <code>decrypt</code> command. It does all the steps of <code>encrypt</code> in reverse.</li>
<li>The last bit is the <code>genkey</code> command for creating the key-pair: <code>crypto</code> once again provides the <code>generateKeyPair</code> function for that. We just pick suitable parameters to call it with. We save the files containing the public and private keys, and reduce permissions on the private key to make it readable only by you.</li>
</ol>
<p>That‚Äôs it! Public-key cryptography for this simple use case:</p>
<ol>
<li>The recipient generates a key-pair (<code>genkey</code>), holds on to the private key, and shares freely the public key. The keys are just files on your computer.</li>
<li>The sender uses the recipient‚Äôs public key (<code>RECIPIENT_KEYFILE.pub</code> above) to encrypt a secret (‚Äúplaintext‚Äù in crypto-speak). The encrypted block of text (ciphertext) is safe to share over an untrusted channel.</li>
<li>The recipient uses their private key (<code>MY_KEYFILE.priv</code> above) to decrypt it. No one else has the private key, and no one can decrypt the ciphertext without it.</li>
</ol>
<figure class="post__image post__image--center" ><figure class="post__image"><img loading="lazy"  src="https://mill.plainopen.com/media/posts/3/sisyphus-2.jpeg" alt="Sisiphus being crushed by his stone" width="600" height="395" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://mill.plainopen.com/media/posts/3/responsive/sisyphus-2-xs.jpeg 640w ,https://mill.plainopen.com/media/posts/3/responsive/sisyphus-2-sm.jpeg 768w ,https://mill.plainopen.com/media/posts/3/responsive/sisyphus-2-md.jpeg 1024w ,https://mill.plainopen.com/media/posts/3/responsive/sisyphus-2-lg.jpeg 1366w ,https://mill.plainopen.com/media/posts/3/responsive/sisyphus-2-xl.jpeg 1600w ,https://mill.plainopen.com/media/posts/3/responsive/sisyphus-2-2xl.jpeg 1920w"></figure>
<figcaption ><span style="color: #34495e;">Sisyphus ‚Äúrolling his own‚Äù.</span> <span style="color: #7e8c8d;">(Image source:¬†<a href="https://commons.wikimedia.org/wiki/File:Sisyphus_-_Le_Roman_de_la_Rose.jpeg" target="_blank" rel="noreferrer noopener" style="color: #7e8c8d;">Wikimedia Commons</a>)</span></figcaption>
</figure>
<h4>Did we roll our own security?</h4>
<p>Not entirely. Our solution uses and trusts a lot of cryptography code from good sources: Node.js, its <code>crypto</code> module, and the <a href="https://www.openssl.org/">OpenSSL</a> library it‚Äôs based on. These are respected, well-maintained, commonly-used open-source tools, which get plenty of attention from security researchers.</p>
<p>The code we did write, which makes a number of choices about <em>how</em> this cryptography is used, is still sensitive security code. That‚Äôs risky. The main protection here is that it‚Äôs so small that any software engineer can read and understand it. To me what matters is that <em>I</em> can read and understand it.</p>
<p>I find this an interesting compromise. It feels as secure as I can imagine any software to be, and it allows Grist Labs to share technical secrets remotely. For non-technical secrets (like next month‚Äôs book club selection), Slack works fine. For now‚Ä¶</p>
<hr>
<div class="footnote">
<p id="footnote_1">(1) We use <a href="https://platform.openai.com/">OpenAI</a> for Grist‚Äôs <a href="https://www.getgrist.com/ai-formula-assistant/">AI Formula Assistant</a>, but without sending data from your document, only its structure.</p>
<p id="footnote_2">(2) There are plenty of <a href="https://www.reddit.com/r/devops/comments/tofkfs/how_do_you_send_secrets_to_other_people/" target="_blank" rel="noreferrer noopener">other opinions on this problem</a>. But there‚Äôs also this (paraphrased) conversation I had with a colleague after showing them a draft of this post, which brings us back full circle:</p>
<p><em style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">‚ÄúIf we‚Äôre bothering with encryption and keypairs, why not just PGP?‚Äù</em></p>
<p><em style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">‚ÄúThat‚Äôs still software I have to trust and install. In fact, I just tried, and got lost immediately. I found OpenPGP which has a half-dozen email-related packages for MacOS (didn‚Äôt try: proprietary/paid, and all about specific email clients that I don‚Äôt need), and found GPG which has two installers for Mac. I tried one, and it needs root access to install itself. Why would I give some software root access just to encrypt a secret? It certainly doesn‚Äôt increase my trust in it.‚Äù</em></p>
<p><em style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">‚ÄúI guess what this answer points out, once again, is that GPG has a usability problem‚Ä¶ So bad that it‚Äôs easier to create a short script in Node.js to do one of its core features.‚Äù</em></p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Why sorting is harder than it seems</title>
        <author>
            <name>Dmitry Sagalovskiy</name>
        </author>
        <link href="https://mill.plainopen.com/why-sorting-is-harder-than-it-seems.html"/>
        <id>https://mill.plainopen.com/why-sorting-is-harder-than-it-seems.html</id>
            <category term="math"/>
            <category term="javascript"/>
            <category term="education"/>
            <category term="computer science"/>
            <category term="algorithms"/>

        <updated>2025-01-27T16:44:38-05:00</updated>
            <summary>
                <![CDATA[
                    <header>
<p>This story is about sorting arrays. I am telling it because sorting continues to surprise me with delightful bugs. Frustrating too, but also delightful. First, some context...</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                
<p class="msg--highlight msg msg--info">Appeared originally at <a href="https://www.getgrist.com/blog/why-sorting-is-harder-than-it-seems/">https://www.getgrist.com/blog/why-sorting-is-harder-than-it-seems/</a> on 2023-02-09.</p>
</header>
<p>This story is about sorting arrays. I am telling it because sorting continues to surprise me with delightful bugs. Frustrating too, but also delightful.</p>
<p>First, some context. I‚Äôve been working for years on a spreadsheet-database tool called <a href="https://www.getgrist.com/">Grist</a>. Naturally, it lets users sort data. There are some complications, such as letting users sort by multiple columns. Also, a column may contain different types of values: for instance, mostly numbers but with some cells that are empty or that contain a string like ‚ÄúN/A‚Äù or ‚ÄúTBD‚Äù.</p>
<p>Normally, sorting happens in Javascript, on data that‚Äôs already in the browser. So this post is mainly about sorting in Javascript, although the most important points are not language-specific <sup><a href="#fn4">(4)</a></sup>.</p>
<h3 id="h-default-javascript-sort">Default JavaScript Sort</h3>
<p>We don‚Äôt need a complex example to start scratching our heads:</p>
<pre class="language-javascript"><code>[10, 2, 'x'].sort() // -&gt; produces [ 10, 2, 'x' ]</code></pre>
<p>This should not surprise you. We didn‚Äôt really say what we expect from mixing strings and numbers. Should <code>'a'</code> come before <code>2</code> or after? Well, Javascript has a particular answer for us: it always sorts all items as strings. The result we see is alphabetically sorted, according to the order we‚Äôd get from converting each item to a string.</p>
<p>This is bad for a spreadsheet. We <em>really</em> expect 2 to come before 10.</p>
<h3 id="h-comparators">Comparators</h3>
<p>Luckily, Javascript gives us a way to fix this: pass in a <em>comparator</em> function that defines the sort order <a href="#fn1"><sup>(1)</sup></a>. Javascript expects this function to take two values, say, <code>a</code> and <code>b</code>, and return something negative when <code>a &lt; b</code>, something positive when <code>a &gt; b</code>, and 0 when <code>a</code> and <code>b</code> should be considered equivalent.</p>
<p>Most instructions for using <code>sort()</code> provide a helpful comparator function for sorting numbers:</p>
<pre class="language-javascript"><code>function compareNumbers(a, b) {  return a - b;}</code></pre>
<p>Indeed, it satisfies the requirements: the returned value is negative, positive, or zero in all the right cases. Let‚Äôs give it a try:</p>
<pre class="language-javascript"><code>[10, 2, 'x' ].sort(compareNumbers)     // -&gt; produces [ 2, 10, 'x' ]</code></pre>
<p>Whew, you sigh! This looks correct, and was easy enough. Right? No, this would be too easy. Look at the result if we reverse two values in the original array:</p>
<pre class="language-javascript"><code>[10, 'x' , 2].sort(compareNumbers)     // -&gt; produces [ 10, 'x', 2 ]</code></pre>
<p>This is not at all correct. It is even more upsetting that it‚Äôs even possible to get different answers.</p>
<p>Let‚Äôs think why this happened? Well, our comparator‚Äôs key operation is <code>a - b</code>. It makes sense for numbers, but not for the string <code>'x'</code>. In fact, when comparing a number to a string, it returns <code>NaN</code>. Maybe that‚Äôs the problem. We were told to return positive, negative, or 0, not <code>NaN</code>.</p>
<p>Let‚Äôs fix our comparator function. Here is a versatile one:</p>
<pre class="language-javascript"><code>function nativeCompare(a, b) {
  return (a &lt; b ? -1 : (a &gt; b ? 1 : 0));
}</code></pre>
<p>In fact, it‚Äôs used a lot in Grist. It‚Äôs perfectly valid to compare <code>'x' &lt; 2</code>, there is no exception, and we always return a valid comparator value: never <code>NaN</code>. This one has got to work. Right?</p>
<pre class="language-javascript"><code>[10, 2, 'x'].sort(nativeCompare)     // -&gt; [ 2, 10, 'x' ]
[10, 'x', 2].sort(nativeCompare)     // -&gt; [ 10, 'x', 2 ]</code></pre>
<p>No, don‚Äôt tell me. The same exact terrible result as last time.</p>
<h3 id="h-transitivity">Transitivity</h3>
<p>If you read far enough in the documentation of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description" target="_blank" rel="noreferrer noopener">sort on MDN</a>, you‚Äôll find some more requirements that the comparator function needs to fulfill. Let‚Äôs see how our <code>nativeCompare</code> does on these requirements:</p>
<ul>
<li>‚úîÔ∏è It is <em>pure</em>: no side-effects of calling it.</li>
<li>‚úîÔ∏è It is <em>stable</em>: it returns the same result for the same inputs.</li>
<li>‚úîÔ∏è It is <em>reflexive</em>: it returns 0 when called with two of the same value (certainly for the values in our example).</li>
<li>‚ùì Is it <em>anti-symmetric</em>? Calling it for (a, b) or (b, a) should produce opposite signs. We should check.</li>
<li>‚ùì Is it <em>transitive</em>? If a &lt; b and b &lt; c, does it guarantee a &lt; c? We should check.</li>
</ul>
<p>These form the definition of something called a <em>strict weak order </em><sup><a href="#fn2">(2)</a></sup>. All that means is that ‚Äúthe order makes sense‚Äù. The fact that it‚Äôs not an obvious thing is what makes sorting bugs fun (and frustrating).</p>
<p>Our <code>nativeCompare</code> function really just repackages the behavior of the standard Javascript ‚Äúless-than‚Äù and ‚Äúgreater-than‚Äù operators. Do those define an order that makes sense?</p>
<p>These operators are described in great detail here: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than" target="_blank" rel="noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than</a>. Good luck figuring out what to expect. To save you some work, no, they do not define an order that ‚Äúmakes sense‚Äù. That‚Äôs because:</p>
<pre class="language-javascript"><code>  1 &lt; "2"  // true
"2" &lt; "a"  // true
  1 &lt; "a"  // false; broken transitivity!</code></pre>
<p>Or with the values from our example:</p>
<pre class="language-javascript"><code>  2 &lt; 'x'  // false
'x' &lt; 10   // false
  2 &lt; 10   // true</code></pre>
<p>This is a fail. By the standard of ‚Äúmakes sense‚Äù, the first two say that <code>2 &gt;= 'x'</code> and <code>'x' &gt;= 10</code>, and the third says <code>2 &lt; 10</code>, the opposite of what transitivity <em>should</em> give us.</p>
<p>Translating it to <code>nativeCompare</code> makes this a bit more precise:</p>
<pre class="language-javascript"><code>nativeCompare(2, 'x')    // 0 (they are "equivalent")
nativeCompare('x', 10)   // 0 (they are "equivalent")
nativeCompare(2, 10)     // -1 (doh!)</code></pre>
<p>This is a fail of transitivity.</p>
<h3 id="h-but-why-is-sort-so-fickle">But why is sort so fickle?</h3>
<p>At this point, maybe it‚Äôs good to step back and say: transitivity-shmansitivity. All the operations are clearly correct for numbers. If we throw a string into the mix, we don‚Äôt really care if it ends up at the start or at the end. But why does it affect the relative order of the numbers? And why the inconsistency?</p>
<p>To answer that, we need to remember the sorting algorithms. That‚Äôs a lovely topic. I remember learning them in AP Computer Science in high school, and in algorithms class in college. These days, there is little <em>need</em> to know them: every modern language has an efficient sorting function or method readily available. But there is satisfaction in understanding them, because they are beautiful gems of insight. <sup><a href="#fn3">(3)</a></sup></p>
<p>What‚Äôs worth remembering is that these are algorithms based on comparisons. They are fast because they minimize the number of comparisons. The efficient algorithms (including all the built-in implementations) make <em>O(N log N)</em> comparisons. This means that are optimally economical with comparisons.</p>
<p>Why does it matter? Because if the algorithm has already noticed that <code>2</code> is ‚Äúequivalent‚Äù to <code>'x'</code>, and that <code>'x'</code> is ‚Äúequivalent‚Äù to <code>10</code>, then it‚Äôs not going to compare <code>2</code> and <code>10</code> at all. Transitivity, remember? It already knows that <code>2</code> is ‚Äúequivalent‚Äù to <code>10</code>, without making the direct comparison.</p>
<p>Think of binary search for a simpler example: you start by comparing a value to one in the middle of a sorted array. This single comparison determines which half to limit the rest of the search to. You‚Äôll never compare your value to anything in the other half. You don‚Äôt have to because of transitivity.</p>
<p>In short, with sorting, each comparison affects the result. So even a single violation of transitivity means that all bets are off. You <em>will</em> (guaranteed) find cases when your sort result is wrong.</p>
<h3 id="h-i-will-have-order">‚ÄúI will have order!‚Äù</h3>
<figure class="post__image"><img loading="lazy"  src="https://mill.plainopen.com/media/posts/1/harry-potter-imelda-staunton-2.gif" alt="" width="498" height="205"></figure>
<p>The only way to fix it is to fix transitivity and anti-symmetry.</p>
<p>The basic idea is this:</p>
<pre class="language-javascript"><code>function typedCompare(a, b) {
   return nativeCompare(typeof a, typeof b) || nativeCompare(a, b);
}</code></pre>
<p>The <code>||</code> operator is a shorthand for saying: return the value on the left, but when it‚Äôs 0, then return the one on the right. The left part compares types (e.g. <code>typeof 2</code> is <code>"number"</code>). If they are not equal, they determine the order of the values. So all numbers come before all strings (because <code>"number" &lt; "string"</code>). When types are equal, then we compare the values themselves. Comparisons actually are consistent when applied only to strings. They are also consistent when applied only to normal numbers (not <code>NaN</code> or <code>Infinity</code> though). So this solution will in fact work for any mix of strings and normal numbers:</p>
<pre class="language-javascript"><code>[10, 2, 'x'].sort(typedCompare)     // -&gt; [ 2, 10, 'x' ]
[10, 'x', 2].sort(typedCompare)     // -&gt; [ 2, 10, 'x' ]</code></pre>
<p>Grist has to deal with other values, like arrays, and with other sort options, like ascending / descending, ‚Äúnatural sort‚Äù, and ‚Äúempty values last‚Äù option. Grist is open-source so you can find all this fancy logic written in code here: <a href="https://github.com/gristlabs/grist-core/blob/main/app/common/SortFunc.ts" target="_blank" rel="noreferrer noopener">https://github.com/gristlabs/grist-core/blob/main/app/common/SortFunc.ts</a>.</p>
<h3 id="h-ok-done-yet">OK, done yet?</h3>
<p>When I said sorting continues to surprise me, I meant it.</p>
<p>The other day Grist had a fix landed for another sorting bug. For sorting empty values last, it had the following comparator function (simplified a bit for clarity):</p>
<pre class="language-javascript"><code>function emptyCompareBad(a, b) {
  if (isEmpty(a)) {
    return 1;
  }
  if (isEmpty(b)) {
    return -1;
  }
  return 0;
}</code></pre>
<p>The idea is straightforward: if <code>a</code> is empty, we compare a as ‚Äúgreater‚Äù than <code>b</code>, to sort after it (right?). Otherwise, we look at <code>b</code>. If that‚Äôs empty, we compare <code>a</code> as ‚Äúless‚Äù than <code>b</code>. Otherwise, they are equivalent, as far as their emptiness is concerned.</p>
<p>No, in fact, this code was buggy. Here‚Äôs the fixed version. See if you can tell when it‚Äôs different:</p>
<pre class="language-javascript"><code>function emptyCompareGood(a, b) {
  return nativeCompare(isEmpty(a), isEmpty(b));
}

// Recall what nativeCompare() is:
function nativeCompare(a, b) {
  return (a &lt; b ? -1 : (a &gt; b ? 1 : 0));
}</code></pre>
<p>Are these versions equivalent? Sometimes yes, but not if both <code>a</code> and <code>b</code> are empty. In that case, the comparator <em>should</em> return 0 to indicate equivalence, but the bad version was returning 1. Does that break transitivity? No, actually (at least I haven‚Äôt found that), but it breaks the <em>reflexive</em> and <em>anti-symmetric</em> properties. Ultimately, the bug showed up in combination with other comparators.</p>
<p>Sorting in Grist is not perfect in other ways either. For instance, the values <code>NaN</code> and <code>Infinity</code> have the type <code>'number'</code> but don‚Äôt get checked specially. The only reason that‚Äôs not a visible bug in Grist is that these are rarely used and not really supported as cell values. But if you do manage to include them in a Grist document (e.g. as formula return values), you can easily recreate a sorting bug like the ones covered in this post.</p>
<h3 id="h-in-conclusion">In conclusion</h3>
<p>Sorting in Javascript requires a <em>suitable</em> comparator. It is science, not art. You have to pay attention to the types you need to support. My recommendation is to stitch the comparator out of simpler comparators that you can have confidence in: the first one to return a non-zero value should win.</p>
<p>If you make a mistake, it virtually guarantees that some arrays will sort incorrectly.</p>
<p>All this is not actually specific to Javascript <sup><a href="#fn4">(4)</a></sup>. It‚Äôs a general observation of sorting. If your values are a single type, then there is probably a suitable comparator you can already use. When you have to create a comparator of your own, all these lessons apply.</p>
<hr>
<p id="fn1" class="footnote">(1) There are several equivalent ways to define a sort order: C++ <a href="https://cplusplus.com/reference/algorithm/sort/" target="_blank" rel="noreferrer noopener">standard library sort</a> favors a function like ‚Äúless than‚Äù (which return true or false), while Javascript and Python favor ‚Äúcomparator‚Äù (which returns negative, positive, or 0 to indicate ‚Äúless-than‚Äù, ‚Äúgreater-than‚Äù, or ‚Äúequivalent‚Äù).</p>
<p id="fn2" class="footnote">(2) I‚Äôll link to Wikipedia article <a href="https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings" target="_blank" rel="noreferrer noopener">https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings</a> but it looks painful to read even for an enthusiastic theoretical math major.</p>
<p id="fn3" class="footnote">(3) The value in understanding algorithms is similar to the value in understanding the Pythagorean Theorem (and why it‚Äôs true), or understanding why we have seasons on this Earth. Not necessary, but satisfying.</p>
<p id="fn4" class="footnote">(4) Some reactions to this post assumed Javascript is at fault. For string-number conversions, it is, but for all the sorting points, it's not. You'll get the same problems in any language if using an inconsistent comparator, for example when sorting an array of numbers that include NaNs. For example, in Python3, <code>sorted([10, math.nan, 2])</code>¬† produces <code>[10, nan, 2]</code>). In C++, <code>double arr[] = {5, NAN, 2, 10}; std::sort(arr, arr + 4);</code> produces <code>{2, nan, 10, 5}</code>.</p>
            ]]>
        </content>
    </entry>
</feed>
